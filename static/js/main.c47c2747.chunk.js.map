{"version":3,"sources":["AutoComplete/countries.js","AutoComplete/actions.js","AutoComplete/AutoComplete.js","App.js","serviceWorker.js","index.js"],"names":["countries","q","a","filter","country","toLowerCase","indexOf","AutoComplete","props","state","input","showHints","isLoading","hints","active","onChange","e","target","value","length","setState","fetchHints","then","onHintClick","innerText","scrollTo","ref","current","scrollIntoView","behavior","block","onKeyDown","keyCode","activeRef","undefined","React","createRef","this","className","type","name","placeholder","autoComplete","map","hint","index","key","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sTACaA,EAAY,CACrB,cACA,UACA,UACA,UACA,SACA,WACA,oBACA,YACA,UACA,QACA,YACA,UACA,aACA,UACA,UACA,aACA,WACA,UACA,UACA,SACA,QACA,UACA,SACA,UACA,uBACA,WACA,SACA,yBACA,SACA,WACA,eACA,UACA,WACA,WACA,SACA,aACA,iBACA,4BACA,OACA,QACA,QACA,WACA,QACA,eACA,aACA,gBACA,UACA,OACA,UACA,SACA,iBACA,UACA,WACA,WACA,qBACA,UACA,QACA,cACA,oBACA,UACA,UACA,WACA,mBACA,gBACA,OACA,UACA,SACA,mBACA,qBACA,QACA,SACA,UACA,UACA,QACA,YACA,SACA,YACA,UACA,OACA,YACA,WACA,SACA,gBACA,SACA,QACA,WACA,YACA,UACA,UACA,QACA,YACA,OACA,OACA,UACA,cACA,SACA,QACA,UACA,QACA,SACA,SACA,aACA,QACA,WACA,SACA,SACA,aACA,OACA,SACA,UACA,UACA,UACA,QACA,gBACA,YACA,aACA,QACA,YACA,aACA,SACA,WACA,WACA,OACA,QACA,mBACA,aACA,YACA,SACA,aACA,UACA,SACA,WACA,aACA,aACA,UACA,aACA,UACA,UACA,QACA,QACA,cACA,uBACA,gBACA,cACA,YACA,QACA,UACA,cACA,SACA,OACA,WACA,QACA,YACA,SACA,mBACA,WACA,OACA,cACA,SACA,WACA,cACA,QACA,UACA,UACA,SACA,SACA,0BACA,QACA,aACA,wBACA,eACA,UACA,SACA,aACA,eACA,YACA,WACA,WACA,kBACA,UACA,eACA,cACA,cACA,QACA,YACA,mBACA,WACA,aACA,QACA,WACA,YACA,SACA,cACA,QACA,SACA,aACA,WACA,WACA,eACA,OACA,QACA,oBACA,UACA,SACA,eACA,iBACA,SACA,SACA,UACA,uBACA,iBACA,2BACA,UACA,aACA,UACA,eACA,YACA,UACA,sBACA,QACA,SACA,Y,4CC7NG,WAA0BC,GAA1B,SAAAC,EAAA,+EAOIF,EAAUG,QA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","file":"static/js/main.c47c2747.chunk.js","sourcesContent":["/* An array containing all the country names in the world: */\nexport const countries = [\n    'Afghanistan',\n    'Albania',\n    'Algeria',\n    'Andorra',\n    'Angola',\n    'Anguilla',\n    'Antigua & Barbuda',\n    'Argentina',\n    'Armenia',\n    'Aruba',\n    'Australia',\n    'Austria',\n    'Azerbaijan',\n    'Bahamas',\n    'Bahrain',\n    'Bangladesh',\n    'Barbados',\n    'Belarus',\n    'Belgium',\n    'Belize',\n    'Benin',\n    'Bermuda',\n    'Bhutan',\n    'Bolivia',\n    'Bosnia & Herzegovina',\n    'Botswana',\n    'Brazil',\n    'British Virgin Islands',\n    'Brunei',\n    'Bulgaria',\n    'Burkina Faso',\n    'Burundi',\n    'Cambodia',\n    'Cameroon',\n    'Canada',\n    'Cape Verde',\n    'Cayman Islands',\n    'Central Arfrican Republic',\n    'Chad',\n    'Chile',\n    'China',\n    'Colombia',\n    'Congo',\n    'Cook Islands',\n    'Costa Rica',\n    'Cote D Ivoire',\n    'Croatia',\n    'Cuba',\n    'Curacao',\n    'Cyprus',\n    'Czech Republic',\n    'Denmark',\n    'Djibouti',\n    'Dominica',\n    'Dominican Republic',\n    'Ecuador',\n    'Egypt',\n    'El Salvador',\n    'Equatorial Guinea',\n    'Eritrea',\n    'Estonia',\n    'Ethiopia',\n    'Falkland Islands',\n    'Faroe Islands',\n    'Fiji',\n    'Finland',\n    'France',\n    'French Polynesia',\n    'French West Indies',\n    'Gabon',\n    'Gambia',\n    'Georgia',\n    'Germany',\n    'Ghana',\n    'Gibraltar',\n    'Greece',\n    'Greenland',\n    'Grenada',\n    'Guam',\n    'Guatemala',\n    'Guernsey',\n    'Guinea',\n    'Guinea Bissau',\n    'Guyana',\n    'Haiti',\n    'Honduras',\n    'Hong Kong',\n    'Hungary',\n    'Iceland',\n    'India',\n    'Indonesia',\n    'Iran',\n    'Iraq',\n    'Ireland',\n    'Isle of Man',\n    'Israel',\n    'Italy',\n    'Jamaica',\n    'Japan',\n    'Jersey',\n    'Jordan',\n    'Kazakhstan',\n    'Kenya',\n    'Kiribati',\n    'Kosovo',\n    'Kuwait',\n    'Kyrgyzstan',\n    'Laos',\n    'Latvia',\n    'Lebanon',\n    'Lesotho',\n    'Liberia',\n    'Libya',\n    'Liechtenstein',\n    'Lithuania',\n    'Luxembourg',\n    'Macau',\n    'Macedonia',\n    'Madagascar',\n    'Malawi',\n    'Malaysia',\n    'Maldives',\n    'Mali',\n    'Malta',\n    'Marshall Islands',\n    'Mauritania',\n    'Mauritius',\n    'Mexico',\n    'Micronesia',\n    'Moldova',\n    'Monaco',\n    'Mongolia',\n    'Montenegro',\n    'Montserrat',\n    'Morocco',\n    'Mozambique',\n    'Myanmar',\n    'Namibia',\n    'Nauro',\n    'Nepal',\n    'Netherlands',\n    'Netherlands Antilles',\n    'New Caledonia',\n    'New Zealand',\n    'Nicaragua',\n    'Niger',\n    'Nigeria',\n    'North Korea',\n    'Norway',\n    'Oman',\n    'Pakistan',\n    'Palau',\n    'Palestine',\n    'Panama',\n    'Papua New Guinea',\n    'Paraguay',\n    'Peru',\n    'Philippines',\n    'Poland',\n    'Portugal',\n    'Puerto Rico',\n    'Qatar',\n    'Reunion',\n    'Romania',\n    'Russia',\n    'Rwanda',\n    'Saint Pierre & Miquelon',\n    'Samoa',\n    'San Marino',\n    'Sao Tome and Principe',\n    'Saudi Arabia',\n    'Senegal',\n    'Serbia',\n    'Seychelles',\n    'Sierra Leone',\n    'Singapore',\n    'Slovakia',\n    'Slovenia',\n    'Solomon Islands',\n    'Somalia',\n    'South Africa',\n    'South Korea',\n    'South Sudan',\n    'Spain',\n    'Sri Lanka',\n    'St Kitts & Nevis',\n    'St Lucia',\n    'St Vincent',\n    'Sudan',\n    'Suriname',\n    'Swaziland',\n    'Sweden',\n    'Switzerland',\n    'Syria',\n    'Taiwan',\n    'Tajikistan',\n    'Tanzania',\n    'Thailand',\n    \"Timor L'Este\",\n    'Togo',\n    'Tonga',\n    'Trinidad & Tobago',\n    'Tunisia',\n    'Turkey',\n    'Turkmenistan',\n    'Turks & Caicos',\n    'Tuvalu',\n    'Uganda',\n    'Ukraine',\n    'United Arab Emirates',\n    'United Kingdom',\n    'United States of America',\n    'Uruguay',\n    'Uzbekistan',\n    'Vanuatu',\n    'Vatican City',\n    'Venezuela',\n    'Vietnam',\n    'Virgin Islands (US)',\n    'Yemen',\n    'Zambia',\n    'Zimbabwe',\n];\n","import { countries } from './countries';\n\nexport async function fetchHints(q) {\n    // it can be a remote fetch request like the following\n    //    // const response = await fetch(`https://api.com/v1/ticker/?limit=10`);\n    //    // const json = await response.json();\n    //    // return json\n\n    // or local search\n    return countries.filter((country) => country.toLowerCase().indexOf(q.toLowerCase()) > -1);\n}\n","import React from 'react';\nimport { fetchHints } from './actions';\n\nexport class AutoComplete extends React.Component {\n    constructor(props) {\n        super(props);\n        this.activeRef = React.createRef();\n    }\n\n    state = {\n        input: '',\n        showHints: false,\n        isLoading: false,\n        hints: [],\n        active: -1,\n    };\n\n    onChange = (e) => {\n        const input = e.target.value;\n\n        if (input.length === 0) {\n            // there is no input - hide hints\n            this.setState((state) => ({\n                ...state,\n                input,\n                active: -1,\n                showHints: false,\n                isLoading: false,\n                hints: [],\n            }));\n            return;\n        }\n\n        // show hint list, reset search attributes\n        this.setState((state) => ({\n            ...state,\n            input,\n            active: -1,\n            showHints: true,\n            hints: [],\n            isLoading: true,\n        }));\n\n        // fetch new hints\n        fetchHints(input).then((hints) => {\n            this.setState((state) => ({\n                ...state,\n                hints,\n                active: hints.length > 0 ? 0 : -1,\n                showHints: true,\n                isLoading: false,\n            }));\n        });\n    };\n\n    onHintClick = (e) => {\n        this.setState({\n            isLoading: false,\n            showHints: false,\n            input: e.target.innerText,\n        });\n    };\n\n    scrollTo = (ref) => {\n        if (ref && ref.current) {\n            ref.current.scrollIntoView({ behavior: 'auto', block: 'nearest' });\n        }\n    };\n\n    onKeyDown = (e) => {\n        const { active, hints, showHints, input } = this.state;\n\n        // backspace\n        if (e.keyCode === 8) {\n            if (showHints === false) {\n                this.setState((state) => ({\n                    ...state,\n                    input: '',\n                    active: -1,\n                    hints: [],\n                }));\n            }\n            return;\n        }\n\n        // enter key\n        if (e.keyCode === 13) {\n            this.setState((state) => ({\n                ...state,\n                showHints: false,\n                input: hints[active] !== undefined ? hints[active] : input,\n            }));\n            return;\n        }\n\n        // up\n        if (e.keyCode === 38) {\n            if (showHints === true) {\n                if (active < 1) {\n                    return;\n                }\n\n                this.setState(\n                    (state) => ({\n                        ...state,\n                        active: active - 1,\n                        input: hints[active - 1],\n                    }),\n                    () => {\n                        this.scrollTo(this.activeRef);\n                    },\n                );\n\n                return;\n            }\n\n            if (input.length) {\n                this.setState(\n                    (state) => ({\n                        ...state,\n                        showHints: true,\n                    }),\n                    () => {\n                        this.scrollTo(this.activeRef);\n                    },\n                );\n                return;\n            }\n        }\n\n        // down\n        if (e.keyCode === 40) {\n            if (showHints === true) {\n                if (active + 1 >= hints.length) {\n                    return;\n                }\n\n                this.setState(\n                    (state) => ({\n                        ...state,\n                        active: active + 1,\n                        input: hints[active + 1],\n                        showHints: true,\n                    }),\n                    () => {\n                        this.scrollTo(this.activeRef);\n                    },\n                );\n\n                return;\n            }\n\n            if (input.length) {\n                this.setState(\n                    (state) => ({\n                        ...state,\n                        showHints: true,\n                    }),\n                    () => {\n                        this.scrollTo(this.activeRef);\n                    },\n                );\n            }\n        }\n    };\n\n    render() {\n        const {\n            onChange,\n            onHintClick,\n            onKeyDown,\n            state: { active, hints, showHints, input },\n        } = this;\n\n        return (\n            <>\n                <h2>Autocomplete</h2>\n                <p>Start typing:</p>\n                <div className=\"autocomplete\">\n                    <input\n                        type=\"text\"\n                        name=\"myCountry\"\n                        onChange={onChange}\n                        onKeyDown={onKeyDown}\n                        value={input}\n                        placeholder=\"Country\"\n                        autoComplete=\"off\"\n                    />\n\n                    {showHints && hints.length > 0 && (\n                        <ul className=\"hints\">\n                            {hints.map((hint, index) => {\n                                let className;\n\n                                // Flag the active hint with a class\n                                if (index === active) {\n                                    className = 'hint-active';\n\n                                    return (\n                                        <li\n                                            ref={this.activeRef}\n                                            className={className}\n                                            key={hint}\n                                            onClick={onHintClick}\n                                        >\n                                            {hint}\n                                        </li>\n                                    );\n                                }\n\n                                return (\n                                    <li className={className} key={hint} onClick={onHintClick}>\n                                        {hint}\n                                    </li>\n                                );\n                            })}\n                        </ul>\n                    )}\n\n                    {showHints && hints.length === 0 && (\n                        <div className=\"no-hints\">\n                            <em>Sorry, there is no overlap</em>\n                        </div>\n                    )}\n                </div>\n            </>\n        );\n    }\n}\n\nexport default AutoComplete;\n","import React from 'react';\nimport './App.css';\nimport { AutoComplete } from './AutoComplete';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <AutoComplete />\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}